<div class="container">
    <div class="modal" id="myModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create Company</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="createCompany" OnValidSubmit="HandleCreateForm" class="form">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label for="companyName" class="custom-label">Company Name</label>
                            <InputText @bind-Value="createCompany.CompanyName" class="form-control" id="companyName">Company Name</InputText>
                            <ValidationMessage class="alert alert-danger" For="@(() => createCompany.CompanyName)" />
                        </div>

                        <div class="mb-3">
                            <label for="companyType" class="custom-label">Company Type</label>
                            <InputText @bind-Value="createCompany.Type" class="form-control" id="companyType">Company Type</InputText>
                            <ValidationMessage For="@(() => createCompany.Type)" />
                        </div>

                        <div class="mb-3">
                            <label for="companyImage" class="custom-label">Image Url</label>
                            <InputText @bind-Value="createCompany.Avatar" class="form-control" id="companyImage">Image Url</InputText>
                            <ValidationMessage For="@(() => createCompany.Avatar)" />
                        </div>

                        <div class="mb-3">
                            <label for="companyDescription" class="custom-label">Company Description</label>
                            <InputTextArea class="form-control" id="companyDescription" style="margin-top: -1px;" @bind-Value="@createCompany.Description" rows="4"></InputTextArea>
                            <ValidationMessage For="@(() => createCompany.Description)" />
                        </div>
                        <button type="submit" class="btn btn-primary">Create</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    [Inject]
    private ICompanyService _companyService { get; set; }
    @inject NavigationManager _navigationManager
    @inject IToastService toastService

    [Parameter]
    public Guid UserId { get; set; }

    private Company createCompany { get; set; } = new Company();


    private async Task HandleCreateForm()
    {
        createCompany.Id = Guid.NewGuid();
        createCompany.UserId = UserId;
        createCompany.CreatedDate = DateTime.Now;

        var created = await _companyService.CreateCompany(createCompany);
        if (created == null)
        {
            toastService.ShowError("Provided company name already exists");
        }
        else
        {
            toastService.ShowSuccess("Company Successfully created");
            _navigationManager.NavigateTo("/companies", true);
        }
    }
}
