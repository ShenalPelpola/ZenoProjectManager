@page "/user/projects"
@inject NavigationManager _navigationManager
@inject ILocalStorageService _localStorageService
@attribute [Authorize(Roles = "user")]

<SizeNavUser></SizeNavUser>
<div class="content-container" id="content-container">
    <h3>Projects</h3>

    @if (projects == null)
    {
        <img src="./images/spinner.gif" class="spinner" alt="Loading..." />
    }
    else if (projects.Count() == 0)
    {
        <div class="not-available">
            <p>No projects available</p>
        </div>
    }
    else
    {
        <table class="table align-middle mb-0 bg-white">
            <thead class="bg-light">
                <tr>
                    <th>Project Name</th>
                    <th>Description</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var project in projects)
                {
                    <tr>
                        <td>
                            <div class="d-flex align-items-center">
                                <img src="@project.Image" class="rounded-circle" alt=""
                                     style="width: 45px; height: 45px" />
                                <div class="ms-3">
                                    <a href="/projects/@project.Id/taskboard"><p class="fw-bold mb-1">@project.ProjectName</p></a>
                                </div>
                            </div>
                        </td>
                        <td>
                            @project.Description
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>


@code {
    [Inject]
    private IProjectUserService _projectUserService { get; set; }
    @inject NavigationManager _navigationManager
    [Parameter]
    public Guid CompanyId { get; set; }
    [Inject]
    private IAuthService _authService { get; set; }
    private Guid userId { get; set; }
    private User user { get; set; }

    public IEnumerable<Project> projects { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var jwtToken = await _localStorageService.GetItemAsync<string>("jwt_token");
        if (jwtToken == null)
        {
            _navigationManager.NavigateTo("/");
        }

        user = await _authService.GetUserByJwt(jwtToken);
        userId = user.Id;
 
        projects = (await _projectUserService.GetUserProjects(userId)).ToList();
    }
}
