<div class="container">

    <div class="modal" id="myModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete Account</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <p>
                        This will permanently delete the account <b>@Email</b> and all
                        projects, tickets and previous work will be loss.
                    </p>
                    <span>Please type <b>@Email</b> to confirm.</span>

                    <EditForm Model="deleteUser" OnValidSubmit="HandleDelete" class="form">
                        <DataAnnotationsValidator />
                        <div class="mb-3 form-group">
                            <InputText @bind-Value="deleteUser.Email" class="form-control"></InputText>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-outline-danger" data-bs-dismiss="modal">Confirm</button>
                        </div>
                    </EditForm>

                </div>
            </div>
        </div>
    </div>
</div>

@code{
    @inject NavigationManager _navigationManager
    @inject IToastService toastService
    @inject ILocalStorageService _localStorageService
    [Inject]
    private IUserService _userService { get; set; }

    [Parameter]
    public string Email { get; set; }
    [Parameter]
    public Guid ProjectId { get; set; }

    private User deleteUser { get; set; } = new User();

    public async Task HandleDelete()
    {
        var deleted = await _userService.DeleteUser(deleteUser.Email);
        if (deleted == null)
        {
            toastService.ShowError("Provided email is invalid.");
        }
        else
        {
            await _localStorageService.RemoveItemAsync("jwt_token");
            _navigationManager.NavigateTo("/", true);
        }
    }
}


